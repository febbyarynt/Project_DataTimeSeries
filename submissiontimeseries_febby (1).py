# -*- coding: utf-8 -*-
"""SubmissionTimeSeries_Febby.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lJeV9mIvX2CHaSt9CL1VsGZ1nrA4xnlE

## Data Diri
* Nama : Febby Ariyanti Herdiana
* Grup : M06
"""

import numpy as np
import pandas as pd
from keras.layers import Dense, LSTM, Bidirectional, Dropout 
import matplotlib.pyplot as plt
import tensorflow as tf

from sklearn.model_selection import train_test_split
import sklearn.preprocessing
import sklearn.preprocessing
from keras.models import Sequential
from sklearn.metrics import r2_score

data_train = pd.read_csv('/content/goldtimeseries.zip')
data_train

data_train.isnull().sum()

def normalize_data(data_train):
    scaler = sklearn.preprocessing.MinMaxScaler()
    data_train['Value']=scaler.fit_transform(data_train['Value'].values.reshape(-1,1))
    return data_train

df_norm = normalize_data(data_train)
df_norm.shape

date = data_train['Date'].values
value  = data_train['Value'].values
 
 
plt.figure(figsize=(15,5))
plt.plot(date, value)
plt.title('Value Average',
          fontsize=20);

x_train, x_valid, y_train, y_valid = train_test_split(value, date, train_size=0.8, test_size=0.2, shuffle=False )

print('Total Data Train : ',len(x_train))
print('Total Data Validation : ',len(x_valid))

def windowed_dataset(series, window_size, batch_size, shuffle_buffer):
    series = tf.expand_dims(series, axis=-1)
    ds = tf.data.Dataset.from_tensor_slices(series)
    ds = ds.window(window_size + 1, shift=1, drop_remainder=True)
    ds = ds.flat_map(lambda w: w.batch(window_size + 1))
    ds = ds.shuffle(shuffle_buffer)
    ds = ds.map(lambda w: (w[:-1], w[-1:]))
    return ds.batch(batch_size).prefetch(1)

train_set = windowed_dataset(x_train, window_size=60, batch_size=100, shuffle_buffer=1000)
val_set = windowed_dataset(x_valid, window_size=60, batch_size=200, shuffle_buffer=1000)
model = tf.keras.models.Sequential([
                                    Bidirectional(tf.keras.layers.LSTM(60, return_sequences=True)),
                                    Bidirectional(tf.keras.layers.LSTM(60, dropout=0.2)),
                                    Dense(16, activation="relu"),
                                    Dropout(0.2),
                                    Dense(8, activation="relu"),
                                    Dense(1),
])

minMae = (data_train['Value'].max() - data_train['Value'].min()) * 10 / 100 
minMae

class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('mae') < minMae and logs.get('val_mae') < minMae):
      print("\MAE dari model < 10% skala data")
      self.model.stop_training = True
callbacks = myCallback()

optimizer = tf.keras.optimizers.SGD(lr=1.0000e-04, momentum=0.9)
model.compile(loss=tf.keras.losses.Huber(),
              optimizer=optimizer,
              metrics=["mae"])

history = model.fit(train_set,
                    epochs=100,
                    validation_data=val_set,
                    callbacks=[callbacks])

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline

import matplotlib.image as mpimg
import matplotlib.pyplot as plt

plt.plot(history.history['mae'])
plt.plot(history.history['val_mae'])
plt.title('Model Accuracy')
plt.xlabel('epoch')
plt.ylabel('Mae')
plt.legend(['Training', 'Validation'], loc = 'best')
plt.show()

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Model Loss')
plt.xlabel('epoch')
plt.ylabel('loss')
plt.legend(['Training', 'Validation'], loc = 'best')
plt.show()